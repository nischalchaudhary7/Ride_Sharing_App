




import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";

const ViewOffers = () => {
  const [offers, setOffers] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    const storedOffers = JSON.parse(localStorage.getItem("driverOffers")) || [];
    setOffers(storedOffers);
  }, []);

  const confirmRide = (requestId) => {
    const selectedOffer = offers.find((o) => o.requestId === requestId);
    if (!selectedOffer) return;

    // Add to confirmed rides
    const previousRides = JSON.parse(localStorage.getItem("confirmedRides")) || [];
    localStorage.setItem("confirmedRides", JSON.stringify([...previousRides, selectedOffer]));

    // Remove offer from storage and state
    const updatedOffers = offers.filter((o) => o.requestId !== requestId);
    localStorage.setItem("driverOffers", JSON.stringify(updatedOffers));
    setOffers(updatedOffers); // ✅ Live UI update

    alert(`🎉 Ride #${requestId} confirmed!`);
    navigate("/confirmedride");
  };

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">🚘 Ride Offers You've Received</h1>

      {offers.length === 0 ? (
        <p className="text-gray-600">No drivers have accepted your ride yet.</p>
      ) : (
        offers.map((offer, index) => (
          <div key={index} className="border p-4 rounded shadow mb-4 bg-white">
            <h2 className="text-lg font-semibold mb-2">Ride Offer #{offer.requestId}</h2>

            {/* 👤 Driver Info */}
            <h3 className="font-bold mb-1">👤 Driver Details:</h3>
            <p><strong>Name:</strong> {offer.driverName}</p>
            <p><strong>Gender:</strong> {offer.driverGender}</p>
            <p><strong>Age:</strong> {offer.driverAge}</p>
            <p><strong>ID:</strong> {offer.driverId}</p>

            {/* 📍 Ride Info */}
            <h3 className="font-bold mt-4 mb-1">📍 Ride Info:</h3>
            <p><strong>Pickup:</strong> {offer.pickupAddress}</p>
            <p><strong>Destination:</strong> {offer.destinationAddress}</p>
            <p><strong>Accepted At:</strong> {new Date(offer.acceptedAt).toLocaleString()}</p>

            {/* 💰 Fare Comparison */}
            <h3 className="font-bold mt-4 mb-1 text-purple-700">💵 Fare Comparison:</h3>
            <p><strong>Passenger’s Estimated Fare:</strong> ${offer.passengerFare || "N/A"}</p>
            <p><strong>Driver’s Proposed Fare:</strong> ${offer.driverFare || "N/A"}</p>

            <button
              onClick={() => confirmRide(offer.requestId)}
              className="mt-3 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
            >
              ✅ Confirm This Ride
            </button>
          </div>
        ))
      )}
    </div>
  );
};

export default ViewOffers;



import { useState, useEffect, useRef } from "react"; 
import { useNavigate } from "react-router-dom";
import {
  GoogleMap,
  Marker,
  Autocomplete,
  DirectionsRenderer,
  useJsApiLoader,
} from "@react-google-maps/api";

const dummyDrivers = [
  { id: 1, name: "Driver A", lat: 32.78, lng: -96.8 },
  { id: 2, name: "Driver B", lat: 32.77, lng: -96.81 },
  { id: 3, name: "Driver C", lat: 32.75, lng: -96.85 },
];

const mapContainerStyle = {
  height: "250px",
  width: "100%",
};

const PassengerDashboard = () => {
  const [pickup, setPickup] = useState(null);
  const [destination, setDestination] = useState(null);
  const [pickupAddress, setPickupAddress] = useState("");
  const [destinationAddress, setDestinationAddress] = useState("");
  const [scheduleType, setScheduleType] = useState("instant");
  const [scheduledTime, setScheduledTime] = useState("");
  const [estimatedFare, setEstimatedFare] = useState(0);
  const [center, setCenter] = useState({ lat: 32.7767, lng: -96.797 });
  const [directions, setDirections] = useState(null);
  const [distanceText, setDistanceText] = useState("");
  const [durationText, setDurationText] = useState("");

  const navigate = useNavigate();
  const pickupAutoRef = useRef(null);
  const destAutoRef = useRef(null);

  const { isLoaded } = useJsApiLoader({
    googleMapsApiKey: import.meta.env.VITE_GOOGLE_MAPS_API_KEY,
    libraries: ["places"],
  });

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(
      (pos) => {
        const loc = {
          lat: pos.coords.latitude,
          lng: pos.coords.longitude,
        };
        setPickup(loc);
        setCenter(loc);
      },
      (err) => console.warn("Geolocation error:", err)
    );
  }, []);

  useEffect(() => {
    if (pickup && destination && isLoaded) {
      const directionsService = new window.google.maps.DirectionsService();
      const matrixService = new window.google.maps.DistanceMatrixService();

      directionsService.route(
        {
          origin: pickup,
          destination: destination,
          travelMode: window.google.maps.TravelMode.DRIVING,
          drivingOptions: {
            departureTime: new Date(),
            trafficModel: "bestguess",
          },
        },
        (result, status) => {
          if (status === "OK") {
            setDirections(result);
          } else {
            console.error("Directions request failed due to", status);
          }
        }
      );

      matrixService.getDistanceMatrix(
        {
          origins: [pickup],
          destinations: [destination],
          travelMode: window.google.maps.TravelMode.DRIVING,
          drivingOptions: {
            departureTime: new Date(),
            trafficModel: "bestguess",
          },
          unitSystem: window.google.maps.UnitSystem.IMPERIAL,
        },
        (response, status) => {
          if (status === "OK") {
            const element = response.rows[0].elements[0];
            setDistanceText(element.distance?.text || "");
            setDurationText(element.duration_in_traffic?.text || element.duration?.text || "");
          }
        }
      );
    }
  }, [pickup, destination, isLoaded]);

  const handleSubmit = () => {
    if (!pickup || !destination) return alert("Set both pickup and destination.");
    const ride = {
      id: Date.now(),
      pickup,
      destination,
      pickupAddress,
      destinationAddress,
      scheduleType,
      scheduledTime: scheduleType === "scheduled" ? scheduledTime : null,
      passengerName: "John Doe",
      passengerAge: 25,
      passengerGender: "Male",
      passengerIDCard: "ABC123456",
      estimatedFare,
    };
    const existing = JSON.parse(localStorage.getItem("rideRequests")) || [];
    localStorage.setItem("rideRequests", JSON.stringify([...existing, ride]));
    alert("✅ Ride request submitted!");
    window.location.reload();
  };

  const handlePickupPlaceChange = () => {
    const place = pickupAutoRef.current.getPlace();
    if (place.geometry) {
      setPickupAddress(place.formatted_address);
      const loc = {
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng(),
      };
      setPickup(loc);
      setCenter(loc);
    }
  };

  const handleDestinationPlaceChange = () => {
    const place = destAutoRef.current.getPlace();
    if (place.geometry) {
      setDestinationAddress(place.formatted_address);
      const loc = {
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng(),
      };
      setDestination(loc);
    }
  };

  if (!isLoaded) return <div>Loading Maps...</div>;

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold text-center mb-4">📍 Request a Ride</h1>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
        <div className="border rounded p-4">
          <h2 className="font-semibold mb-2">Select Pickup Location</h2>
          <Autocomplete onLoad={(ref) => (pickupAutoRef.current = ref)} onPlaceChanged={handlePickupPlaceChange}>
            <input
              type="text"
              placeholder="Enter pickup address"
              className="w-full p-2 mb-2 border rounded"
              value={pickupAddress}
              onChange={(e) => setPickupAddress(e.target.value)}
            />
          </Autocomplete>
          <GoogleMap
            center={pickup || center}
            zoom={13}
            mapContainerStyle={mapContainerStyle}
            onClick={(e) => setPickup({ lat: e.latLng.lat(), lng: e.latLng.lng() })}
          >
            {pickup && <Marker position={pickup} label="P" />}
            {dummyDrivers.map((d) => (
              <Marker key={d.id} position={{ lat: d.lat, lng: d.lng }} label="🚗" />
            ))}
            {directions && <DirectionsRenderer directions={directions} />}
          </GoogleMap>
        </div>

        <div className="border rounded p-4">
          <h2 className="font-semibold mb-2">Select Destination</h2>
          <Autocomplete onLoad={(ref) => (destAutoRef.current = ref)} onPlaceChanged={handleDestinationPlaceChange}>
            <input
              type="text"
              placeholder="Enter destination address"
              className="w-full p-2 mb-2 border rounded"
              value={destinationAddress}
              onChange={(e) => setDestinationAddress(e.target.value)}
            />
          </Autocomplete>
          <GoogleMap
            center={destination || center}
            zoom={13}
            mapContainerStyle={mapContainerStyle}
            onClick={(e) => setDestination({ lat: e.latLng.lat(), lng: e.latLng.lng() })}
          >
            {destination && <Marker position={destination} label="D" />}
            {directions && <DirectionsRenderer directions={directions} />}
          </GoogleMap>
          {distanceText && durationText && (
            <div className="mt-3 text-sm text-gray-700">
              <p><strong>🛣️ Distance:</strong> {distanceText}</p>
              <p><strong>🕒 Estimated Time (with traffic):</strong> {durationText}</p>
            </div>
          )}
        </div>
      </div>

      <div className="border rounded p-4 mb-4">
        <h2 className="font-semibold mb-2">💰 Estimated Fare</h2>
        <div className="flex items-center space-x-2 mb-2">
          <input
            type="number"
            className="border p-2 rounded w-28"
            value={estimatedFare === 0 ? "" : estimatedFare}
            onChange={(e) => setEstimatedFare(Number(e.target.value))}
            placeholder="e.g. 20"
          />
          <button onClick={() => setEstimatedFare((p) => p + 1)} className="bg-gray-200 px-3 py-1 rounded">
            + $1
          </button>
          <button onClick={() => setEstimatedFare((p) => p + 5)} className="bg-gray-200 px-3 py-1 rounded">
            + $5
          </button>
        </div>
      </div>

      <div className="flex flex-col md:flex-row gap-4 items-center mb-4">
        <label className="font-semibold">Type of Ride:</label>
        <select
          value={scheduleType}
          onChange={(e) => setScheduleType(e.target.value)}
          className="border p-2 rounded"
        >
          <option value="instant">🚨 Instant Ride</option>
          <option value="scheduled">🕒 Schedule for Later</option>
        </select>
        {scheduleType === "scheduled" && (
          <input
            type="datetime-local"
            value={scheduledTime}
            onChange={(e) => setScheduledTime(e.target.value)}
            className="border p-2 rounded"
          />
        )}
      </div>

      <div className="flex flex-col md:flex-row gap-4 items-center mb-6">
        <button
          onClick={handleSubmit}
          className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700"
        >
          Submit Ride Request
        </button>
        <button
          onClick={() => navigate("/passengersearchride")}
          className="bg-indigo-600 text-white px-6 py-2 rounded hover:bg-indigo-700"
        >
          🔍 Browse Available Rides by Drivers
        </button>
      </div>
    </div>
  );
};

export default PassengerDashboard;

import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";

const DriverRequest = () => {
  const [requests, setRequests] = useState([]);
  const [driverFare, setDriverFare] = useState({});
  const navigate = useNavigate();

  useEffect(() => {
    const storedRequests = JSON.parse(localStorage.getItem("rideRequests")) || [];
    const confirmedRides = JSON.parse(localStorage.getItem("confirmedRides")) || [];

    // Remove already confirmed rides
    const confirmedIds = confirmedRides.map((ride) => ride.requestId);
    const availableRequests = storedRequests.filter(req => !confirmedIds.includes(req.id));

    setRequests(availableRequests);
  }, []);

  const handleAccept = (request) => {
    const offer = {
      requestId: request.id,
      driverName: "John Doe",
      driverGender: "Male",
      driverAge: 34,
      driverId: "TX-DR-1022",
      acceptedAt: new Date().toISOString(),
      driverFare: driverFare[request.id] || 0,
      pickupAddress: request.pickupAddress,
      destinationAddress: request.destinationAddress,
      passengerName: request.passengerName,
      passengerAge: request.passengerAge,
      passengerGender: request.passengerGender,
      passengerFare: request.estimatedFare || 0,
    };

    // Save to driverOffers
    const prevOffers = JSON.parse(localStorage.getItem("driverOffers")) || [];
    localStorage.setItem("driverOffers", JSON.stringify([...prevOffers, offer]));

    // Remove this request from localStorage
    const allRequests = JSON.parse(localStorage.getItem("rideRequests")) || [];
    const updatedRequests = allRequests.filter((req) => req.id !== request.id);
    localStorage.setItem("rideRequests", JSON.stringify(updatedRequests));

    // Live update UI
    setRequests(prev => prev.filter((req) => req.id !== request.id));

    alert(`✅ You accepted ride request #${request.id}. Passenger will be notified.`);
    navigate("/driverdashboard");
  };

  const handleFareChange = (id, value) => {
    setDriverFare((prev) => ({ ...prev, [id]: value }));
  };

  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">📩 Incoming Ride Requests</h1>

      {requests.length === 0 ? (
        <p className="text-gray-600">No ride requests at the moment.</p>
      ) : (
        <div className="space-y-4">
          {requests.map((req) => (
            <div key={req.id} className="border p-4 rounded shadow bg-white">
              <h2 className="text-lg font-semibold mb-2">Request #{req.id}</h2>
              <p><strong>Pickup:</strong> {req.pickupAddress}</p>
              <p><strong>Destination:</strong> {req.destinationAddress}</p>
              <p><strong>Passenger Fare Estimate:</strong> ${req.estimatedFare || 0}</p>
              <p>
                <strong>Passenger:</strong> {req.passengerName} ({req.passengerGender}, Age {req.passengerAge})
              </p>

              <div className="mt-2">
                <label className="font-semibold">Set Your Fare ($): </label>
                <input
                  type="number"
                  className="border p-1 rounded w-40"
                  placeholder="Enter fare"
                  value={driverFare[req.id] || ""}
                  onChange={(e) => handleFareChange(req.id, Number(e.target.value))}
                />
              </div>

              <button
                onClick={() => handleAccept(req)}
                className="mt-3 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
              >
                ✅ Accept Ride
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default DriverRequest;



import { Navigate } from "react-router-dom";

const ProtectedRoute = ({ children }) => {
  const isLoggedIn = localStorage.getItem("isLoggedIn");

  return isLoggedIn === "true" ? children : <Navigate to="/login" />;
};

export default ProtectedRoute;


import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import 'leaflet/dist/leaflet.css';


// Components
import Navbar from './components/navbar';
import ProtectedRoute from './components/protectedroute';

// Pages
import Home from './pages/home';
import Login from './pages/login';
import Signup from './pages/signup';
import Dashboard from './pages/dashboard';
import ChooseRole from './pages/role';
import DriverApplication from './pages/driverapplication';
import LocationCheck from './pages/location';
import PassengerDashboard from './pages/passengerDashboard';
import DriverDashboard from './pages/driverdashboard'; 
import DriverRequest from './pages/driverrequest';
import ViewOffers from './pages/viewoffers';
import ConfirmedRide from './pages/confirmedride';
import PassengerRideHistory from './pages/passengerridehistory';
import DriverRideHistory from './pages/driverridehistory';
import Chatroom from "./pages/chatroom";
import PostRide from './pages/postride';
import PassengerSearchRide from "./pages/passengersearchride";
import PassengerProfile from './pages/passengerprofile';
import DriverProfile from './pages/driverprofile';
import AdminPanel from "./pages/adminpanel";
import ContactAdmins from "./pages/contactadmins";
import AdminLogin from "./pages/adminlogin";
import PassengerSidebarPage from "./pages/passengersidebarpage";
import DriverSidebarPage from './pages/driversidebarpage';
import DriverPersonalHistory from './pages/driverpersonalhistory';
import PassengerPersonalHistory from "./pages/passengerpersonalhistory";

function App() {
  return (
    <Router>
      <Navbar />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={<Login />} />
        <Route path="/signup" element={<Signup />} />
        <Route path="/location" element={<LocationCheck />} />
        <Route path="/role" element={<ChooseRole />} />
        <Route path="/driverapplication" element={<DriverApplication />} />
        <Route path="/passengerdashboard" element={<PassengerDashboard />} />
        <Route path="/driverdashboard" element={<DriverDashboard />} /> 
        <Route path="/driverrequest" element={<DriverRequest />} />
        <Route path="/viewoffers" element={<ViewOffers />} />
        <Route path="/confirmedride" element={<ConfirmedRide />} />
        <Route path="/passengerhistory" element={<PassengerRideHistory />} />
        <Route path="/driverhistory" element={<DriverRideHistory />} />
        <Route path="/chatroom" element={<Chatroom />} />
        <Route path="/postride" element={<PostRide />} />
        <Route path="/passengersearchride" element={<PassengerSearchRide />} />
        <Route path="/passengerprofile" element={<PassengerProfile />} />
        <Route path="/driverprofile" element={<DriverProfile />} />
        <Route path="/adminpanel" element={<AdminPanel />} />
        <Route path="/contactadmins" element={<ContactAdmins />} />
        <Route path="/adminlogin" element={<AdminLogin />} />
        <Route path="/passengersidebar" element={<PassengerSidebarPage />} />
        <Route path="/driversidebar" element={<DriverSidebarPage />} />
        <Route path="/driverpersonalhistory" element={<DriverPersonalHistory />} />
        <Route path="/passengerpersonalhistory" element={<PassengerPersonalHistory />} />





        <Route
          path="/dashboard"
          element={
            <ProtectedRoute>
              <Dashboard />
            </ProtectedRoute>
          }
        />
      </Routes>
    </Router>
  );
}

export default App;



import { useNavigate } from "react-router-dom";

const Role = () => {
  const navigate = useNavigate();

  const selectRole = (role) => {
    const user = JSON.parse(localStorage.getItem("currentUser"));
    if (!user) return navigate("/login");

    localStorage.setItem("role", role);

    if (role === "passenger") {
      // Redirect to passenger sidebar
      navigate("/passengersidebar");
    } else if (role === "driver") {
      user.isDriver = true;
      localStorage.setItem("currentUser", JSON.stringify(user));

      if (user.driverApproved) {
        // Approved driver goes to driver sidebar
        navigate("/driversidebar");
      } else {
        // Not approved, go to driver application form
        navigate("/driverapplication");
      }
    }
  };

  return (
    <div className="h-screen flex flex-col justify-center items-center bg-black text-white text-center">
      <h2 className="text-2xl mb-4">Are you a passenger or a driver?</h2>
      <div className="space-x-4">
        <button
          onClick={() => selectRole("passenger")}
          className="bg-lime-400 text-black px-6 py-2 rounded font-semibold"
        >
          Passenger
        </button>
        <button
          onClick={() => selectRole("driver")}
          className="bg-gray-700 px-6 py-2 rounded font-semibold"
        >
          Driver
        </button>
      </div>
    </div>
  );
};

export default Role;


import { useState, useEffect } from "react";
import { Link, Outlet, useNavigate } from "react-router-dom";
import {
  FaTachometerAlt,
  FaMapMarkerAlt,
  FaUser,
  FaEnvelopeOpenText,
  FaSignOutAlt,
  FaBell,
  FaCheck,
  FaHistory,
} from "react-icons/fa";
import { MdOutlineLocalOffer } from "react-icons/md";

const DriverSidebarPage = () => {
  const navigate = useNavigate();
  const user = JSON.parse(localStorage.getItem("currentUser"));
  const [active, setActive] = useState("dashboard");
  const [isActive, setIsActive] = useState(user?.driverActive || false); // Active status

  // Sync with localStorage when toggled
  useEffect(() => {
    if (user) {
      const updatedUser = { ...user, driverActive: isActive };
      localStorage.setItem("currentUser", JSON.stringify(updatedUser));
    }
  }, [isActive]);

  const toggleActiveStatus = () => {
    setIsActive((prev) => !prev);
  };

  const logout = () => {
    localStorage.clear();
    navigate("/login");
  };

  const navItems = [
    { label: "Requests", icon: <MdOutlineLocalOffer />, path: "/driverrequest" },
    { label: "Post Ride", icon: <FaMapMarkerAlt />, path: "/postride" },
    { label: "Confirmed Ride", icon: <FaCheck />, path: "/confirmedride" },
    { label: "Feedbacks", icon: <FaTachometerAlt />, path: "/driverdashboard" },
    { label: "Profile", icon: <FaUser />, path: "/driverprofile" },
    { label: "Ride History", icon: <FaHistory />, path: "/driverpersonalhistory" },
    { label: "Contact Admin", icon: <FaEnvelopeOpenText />, path: "/contactadmins" },
    { label: "Notifications", icon: <FaBell />, path: "/notifications" },
  ];

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div className="w-64 bg-white border-r shadow-sm flex flex-col justify-between">
        <div>
          {/* ✅ Active/Inactive Toggle */}
          <div className="flex justify-center items-center py-4 border-b">
            <button
              onClick={toggleActiveStatus}
              className={px-4 py-2 rounded font-semibold shadow ${
                isActive ? "bg-green-500 text-white" : "bg-red-500 text-white"
              }}
            >
              {isActive ? "Active 🟢" : "Inactive 🔴"}
            </button>
          </div>

          <nav className="mt-4">
            {navItems.map((item, index) => (
              <Link
                key={index}
                to={item.path}
                onClick={() => setActive(item.label)}
                className={flex items-center px-4 py-3 hover:bg-blue-100 ${
                  active === item.label ? "bg-blue-100 font-bold" : ""
                }}
              >
                <span className="mr-3 text-lg">{item.icon}</span>
                {item.label}
              </Link>
            ))}
          </nav>
        </div>

        <div className="p-4 border-t">
          <button
            onClick={logout}
            className="flex items-center text-red-600 hover:underline"
          >
            <FaSignOutAlt className="mr-2" /> Logout
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 p-6 overflow-y-auto">
        <Outlet />
      </div>
    </div>
  );
};

export default DriverSidebarPage; 


import { useState } from "react"; 
import { Link, Outlet, useNavigate } from "react-router-dom";
import {
  FaTachometerAlt,
  FaSearchLocation,
  FaUser,
  FaEnvelopeOpenText,
  FaSignOutAlt,
  FaBell,
  FaCheck,
  FaHistory, // ✅ Added this for Ride History
} from "react-icons/fa";
import { MdOutlineLocalOffer } from "react-icons/md";

const PassengerSidebarPage = () => {
  const [active, setActive] = useState("dashboard");
  const navigate = useNavigate();

  const logout = () => {
    localStorage.clear();
    navigate("/login");
  };

  const navItems = [
    { label: "Dashboard", icon: <FaTachometerAlt />, path: "/passengerdashboard" },
    { label: "Browse Rides", icon: <FaSearchLocation />, path: "/passengersearchride" },
    { label: "Offers", icon: <MdOutlineLocalOffer />, path: "/viewoffers" },
    { label: "Confirmed Ride", icon: <FaCheck />, path: "/confirmedride" },
    { label: "Profile", icon: <FaUser />, path: "/passengerprofile" },
    { label: "Ride History", icon: <FaHistory />, path: "/passengerpersonalhistory" }, 
    { label: "Contact Admin", icon: <FaEnvelopeOpenText />, path: "/contactadmins" },
    { label: "Notifications", icon: <FaBell />, path: "/notifications" },
  ];

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div className="w-64 bg-white border-r shadow-sm flex flex-col justify-between">
        <div>
          {/* Removed duplicated logo/title here */}

          <nav className="mt-6">
            {navItems.map((item, index) => (
              <Link
                key={index}
                to={item.path}
                onClick={() => setActive(item.label)}
                className={flex items-center px-4 py-3 hover:bg-blue-100 ${
                  active === item.label ? "bg-blue-100 font-bold" : ""
                }}
              >
                <span className="mr-3 text-lg">{item.icon}</span>
                {item.label}
              </Link>
            ))}
          </nav>
        </div>

        <div className="p-4 border-t">
          <button
            onClick={logout}
            className="flex items-center text-red-600 hover:underline"
          >
            <FaSignOutAlt className="mr-2" /> Logout
          </button>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 p-6 overflow-y-auto">
        <Outlet />
      </div>
    </div>
  );
};

export default PassengerSidebarPage;
